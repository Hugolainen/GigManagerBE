// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output = "../src/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ServiceProvider {
  serviceProviderId String             @id @default(uuid())
  name              String             @unique
  users             User[]
  customers         Customer[]
  loadingPlaces     LoadingPlace[]
  tasks             Task[]
  products          Product[]
  shippingDocuments ShippingDocument[]
}

enum UserType {
  superAdmin
  admin
  supervisor
  driver
}

enum UserStatus {
  pending
  active
  disabled
}

model User {
  userId            String          @id @default(uuid())
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [serviceProviderId])
  serviceProviderId String
  username          String          @unique
  firstName         String
  lastName          String
  email             String 
  password          String
  type              UserType
  status            UserStatus
  driver            Driver?
}

model Driver {
  user   User   @relation(fields: [userId], references: [userId])
  userId String @unique
  tasks  Task[]
}

enum CustomerType {
  company
  private
}

model Customer {
  customerId       String            @id @default(uuid())
  serviceProviders ServiceProvider[]
  name             String            @unique
  contactFirstName String
  contactLastName  String
  contactEmail     String
  password         String
  customerType     CustomerType
  loadingPlaces    LoadingPlace[]
}

enum LoadingPlaceType {
  loading
  unloading
}

enum LoadingPlaceStatus {
  company
  private
}

model LoadingPlace {
  loadingPlaceId    String             @id @default(uuid())
  serviceProvider   ServiceProvider    @relation(fields: [serviceProviderId], references: [serviceProviderId])
  serviceProviderId String
  name              String
  type              LoadingPlaceType
  address           String
  contactPerson     String
  phone             String
  email             String
  customer          Customer           @relation(fields: [customerId], references: [customerId])
  customerId        String
  yTunnus           String
  placeCode         String
  additionalNote    String
  refNumber         String
  coordLatitude     Int
  coordLongitude    Int
  status            LoadingPlaceStatus
  loadingTasks      Task[]             @relation("loadingPlace")
  unloadingTasks    Task[]             @relation("unloadingPlace")
}

enum TaskStatus {
  pending
  loaded
  unloaded
}

model Task {
  taskId                String            @id @default(uuid())
  serviceProvider       ServiceProvider   @relation(fields: [serviceProviderId], references: [serviceProviderId])
  serviceProviderId     String
  loadingPlace          LoadingPlace      @relation("loadingPlace", fields: [loadingPlaceId], references: [loadingPlaceId])
  loadingPlaceId        String
  unloadingPlace        LoadingPlace      @relation("unloadingPlace", fields: [unloadingPlaceId], references: [loadingPlaceId])
  unloadingPlaceId      String
  // transfertCompanyId String [ref: > TransfertCompanies.transfertCompanyId]
  optPlannedLoadingTime DateTime
  optLicencePlate       String
  optDriver             Driver            @relation(fields: [optDriverId], references: [userId])
  optDriverId           String
  note                  String
  status                TaskStatus
  products              Product[]
  shippingDocument      ShippingDocument?
}

enum ProductType {
  product
  service
}

enum ProductUnit {
  kg
  t
  m3
  pieces
  h
}

enum ProductStatus {
  active
  inactive
}

model Product {
  productId                 String          @id @default(uuid())
  serviceProvider           ServiceProvider @relation(fields: [serviceProviderId], references: [serviceProviderId])
  serviceProviderId         String
  name                      String
  idCode                    String // from ERP
  type                      ProductType
  unit                      ProductUnit
  productGroup              String // from API
  optAdditionalInfos        String
  requiresTransfertDocument Boolean
  EWCcode                   String // from API
  RDcode                    String // from API
  originCode                String // from API
  wasteType                 String // from API
  oilType                   String // from API
  Hcode                     String // from API (should be an [])
  POPcombo                  String // from API (should be an [])
  packageType               String // from API
  productForm               String // from API
  optAdditionalReportField  String
  UNcode                    String // from API
  status                    ProductStatus
  tasks                     Task[]
}

model ShippingDocument {
  shippingDocumentId String          @id @default(uuid())
  serviceProvider    ServiceProvider @relation(fields: [serviceProviderId], references: [serviceProviderId])
  serviceProviderId  String
  task               Task            @relation(fields: [taskId], references: [taskId])
  taskId             String          @unique
}
